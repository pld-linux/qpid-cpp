--- qpidc-0.16/src/Makefile.am.orig	2012-02-24 21:05:47.000000000 +0100
+++ qpidc-0.16/src/Makefile.am	2012-07-29 13:30:13.075820560 +0200
@@ -137,7 +137,7 @@
 tmoduleexecdir = $(libdir)/qpid/tests
 tmoduleexec_LTLIBRARIES=
 
-AM_CXXFLAGS += -DBOOST_FILESYSTEM_VERSION=2
+AM_CXXFLAGS += -DBOOST_FILESYSTEM_VERSION=3
 
 ## Automake macros to build libraries and executables.
 qpidd_CXXFLAGS = $(AM_CXXFLAGS) -DQPIDD_MODULE_DIR=\"$(dmoduleexecdir)\" -DQPIDD_CONF_FILE=\"$(sysconfdir)/qpidd.conf\"
--- qpidc-0.16/src/qpid/Modules.cpp.orig	2011-03-14 21:29:02.000000000 +0100
+++ qpidc-0.16/src/qpid/Modules.cpp	2012-07-29 21:31:10.801276183 +0200
@@ -73,7 +73,7 @@
 
 void loadModuleDir (std::string dirname, bool isDefault)
 {
-    fs::path dirPath (dirname, fs::native);
+    fs::path dirPath (dirname);
 
     if (!fs::exists (dirPath))
     {
@@ -89,8 +89,8 @@
     fs::directory_iterator endItr;
     for (fs::directory_iterator itr (dirPath); itr != endItr; ++itr)
     {
-        if (!fs::is_directory(*itr) && isShlibName(itr->string()))
-            tryShlib (itr->string().data(), true);
+        if (!fs::is_directory(*itr) && isShlibName(itr->path().string()))
+            tryShlib (itr->path().string().data(), true);
     }
 }
 
--- qpidc-0.16/src/qpid/cluster/StoreStatus.cpp.orig	2010-04-01 19:51:04.000000000 +0200
+++ qpidc-0.16/src/qpid/cluster/StoreStatus.cpp	2012-07-29 21:53:14.617887294 +0200
@@ -77,7 +77,7 @@
         throw Exception(QPID_MSG("No data-dir: When a store is loaded together with clustering, --data-dir must be specified."));
     }
     try {
-        fs::path dir = fs::path(dataDir, fs::native)/SUBDIR;
+        fs::path dir = fs::path(dataDir)/SUBDIR;
         create_directory(dir);
         fs::path file = dir/STORE_STATUS;
         if (fs::exists(file)) {
@@ -106,7 +106,7 @@
     try {
         ostringstream os;
         os << clusterId << endl << shutdownId << endl;
-        fs::path file = fs::path(dataDir, fs::native)/SUBDIR/STORE_STATUS;
+        fs::path file = fs::path(dataDir)/SUBDIR/STORE_STATUS;
         writeFile(file, os.str());
     }
     catch (const std::exception& e) {
--- qpidc-0.16/src/qpid/sys/rdma/RdmaServer.cpp.orig	2010-12-23 18:11:57.000000000 +0100
+++ qpidc-0.16/src/qpid/sys/rdma/RdmaServer.cpp	2020-12-12 20:59:07.797183372 +0100
@@ -119,7 +119,7 @@
     cout << "Drained:\n";
 }
 
-void disconnected(Rdma::Connection::intrusive_ptr& ci) {
+void disconnected(Rdma::Connection::intrusive_ptr ci) {
     ConRec* cr = ci->getContext<ConRec>();
     cr->connection->disconnect();
     cr->data->drainWriteQueue(drained);
@@ -127,7 +127,7 @@
     cout << "Disconnected: " << cr << "\n";
 }
 
-void connectionError(Rdma::Connection::intrusive_ptr& ci, Rdma::ErrorType) {
+void connectionError(Rdma::Connection::intrusive_ptr ci, Rdma::ErrorType) {
     ConRec* cr = ci->getContext<ConRec>();
     cr->connection->disconnect();
     if (cr) {
@@ -137,7 +137,7 @@
     cout << "Connection error: " << cr << "\n";
 }
 
-bool connectionRequest(Rdma::Connection::intrusive_ptr& ci,  const Rdma::ConnectionParams& cp) {
+bool connectionRequest(Rdma::Connection::intrusive_ptr ci,  const Rdma::ConnectionParams& cp) {
     cout << "Incoming connection: ";
 
     // For fun reject alternate connection attempts
@@ -165,7 +165,7 @@
     return x;
 }
 
-void connected(Poller::shared_ptr poller, Rdma::Connection::intrusive_ptr& ci) {
+void connected(Poller::shared_ptr poller, Rdma::Connection::intrusive_ptr ci) {
     static int cnt = 0;
     ConRec* cr = ci->getContext<ConRec>();
     cout << "Connected: " << cr << "(" << ++cnt << ")\n";
--- qpidc-0.16/src/qpid/sys/rdma/rdma_wrap.cpp.orig	2011-04-27 14:51:26.000000000 +0200
+++ qpidc-0.16/src/qpid/sys/rdma/rdma_wrap.cpp	2020-12-12 21:01:58.282926438 +0100
@@ -325,7 +325,7 @@
     {}
 
     ConnectionEvent::operator bool() const {
-        return event;
+        return !!event;
     }
 
     ::rdma_cm_event_type ConnectionEvent::getEventType() const {
--- qpidc-0.16/src/qpid/sys/posix/Thread.cpp.orig	2011-05-09 21:55:29.000000000 +0200
+++ qpidc-0.16/src/qpid/sys/posix/Thread.cpp	2020-12-12 21:24:04.449075313 +0100
@@ -55,7 +55,7 @@
 Thread::Thread(Runnable& runnable) : impl(new ThreadPrivate(&runnable)) {}
 
 Thread::operator bool() {
-    return impl;
+    return !!impl;
 }
 
 bool Thread::operator==(const Thread& t) const {
--- qpidc-0.16/src/qpid/sys/rdma/RdmaClient.cpp.orig	2010-12-23 18:11:57.000000000 +0100
+++ qpidc-0.16/src/qpid/sys/rdma/RdmaClient.cpp	2020-12-12 21:52:39.243118810 +0100
@@ -160,7 +160,7 @@
     cout << "Drained:\n";
 }
 
-void connected(Poller::shared_ptr poller, Rdma::Connection::intrusive_ptr& ci, const Rdma::ConnectionParams& cp) {
+void connected(Poller::shared_ptr poller, Rdma::Connection::intrusive_ptr ci, const Rdma::ConnectionParams& cp) {
     cout << "Connected\n";
     Rdma::QueuePair::intrusive_ptr q = ci->getQueuePair();
 
@@ -178,17 +178,17 @@
     aio->start(poller);
 }
 
-void disconnected(boost::shared_ptr<Poller> p, Rdma::Connection::intrusive_ptr&) {
+void disconnected(boost::shared_ptr<Poller> p, Rdma::Connection::intrusive_ptr) {
     cout << "Disconnected\n";
     p->shutdown();
 }
 
-void connectionError(boost::shared_ptr<Poller> p, Rdma::Connection::intrusive_ptr&, const Rdma::ErrorType) {
+void connectionError(boost::shared_ptr<Poller> p, Rdma::Connection::intrusive_ptr, const Rdma::ErrorType) {
     cout << "Connection error\n";
     p->shutdown();
 }
 
-void rejected(boost::shared_ptr<Poller> p, Rdma::Connection::intrusive_ptr&, const Rdma::ConnectionParams&) {
+void rejected(boost::shared_ptr<Poller> p, Rdma::Connection::intrusive_ptr, const Rdma::ConnectionParams&) {
     cout << "Connection rejected\n";
     p->shutdown();
 }
--- qpidc-0.16/src/qpid/broker/ConnectionHandler.cpp.orig	2012-02-17 15:54:46.000000000 +0100
+++ qpidc-0.16/src/qpid/broker/ConnectionHandler.cpp	2020-12-12 22:11:17.543727122 +0100
@@ -160,7 +160,7 @@
     const framing::FieldTable& clientProperties = body.getClientProperties();
     connection.setClientProperties(clientProperties);
 
-    connection.setFederationLink(clientProperties.get(QPID_FED_LINK));
+    connection.setFederationLink(!!clientProperties.get(QPID_FED_LINK));
     if (clientProperties.isSet(QPID_FED_TAG)) {
         connection.setFederationPeerTag(clientProperties.getAsString(QPID_FED_TAG));
     }
--- qpidc-0.16/src/qpid/broker/DirectExchange.cpp.orig	2012-03-05 20:12:32.000000000 +0100
+++ qpidc-0.16/src/qpid/broker/DirectExchange.cpp	2020-12-12 22:14:20.136071267 +0100
@@ -60,7 +60,7 @@
         fedOp = args->getAsString(qpidFedOp);
         fedTags = args->getAsString(qpidFedTags);
         fedOrigin = args->getAsString(qpidFedOrigin);
-        exclusiveBinding = args->get(qpidExclusiveBinding);  // only direct exchanges take exclusive bindings
+        exclusiveBinding = !!args->get(qpidExclusiveBinding);  // only direct exchanges take exclusive bindings
     }
 
     bool propagate = false;
--- qpidc-0.16/src/qpid/broker/Exchange.cpp.orig	2012-03-05 20:12:32.000000000 +0100
+++ qpidc-0.16/src/qpid/broker/Exchange.cpp	2020-12-12 22:19:45.880973223 +0100
@@ -203,13 +203,13 @@
         }
     }
 
-    sequence = _args.get(qpidMsgSequence);
+    sequence = !!_args.get(qpidMsgSequence);
     if (sequence) {
         QPID_LOG(debug, "Configured exchange " <<  _name  << " with Msg sequencing");
         args.setInt64(std::string(qpidSequenceCounter), sequenceNo);
     }
 
-    ive = _args.get(qpidIVE);
+    ive = !!_args.get(qpidIVE);
     if (ive) {
         if (broker && broker->isInCluster())
             throw framing::NotImplementedException("Cannot use Initial Value Exchanges in a cluster");
--- qpidc-0.16/src/qpid/client/SessionBase_0_10.cpp.orig	2010-04-09 17:08:47.000000000 +0200
+++ qpidc-0.16/src/qpid/client/SessionBase_0_10.cpp	2020-12-13 06:32:59.740649521 +0100
@@ -73,7 +73,7 @@
 
 SessionId SessionBase_0_10::getId() const { return impl->getId(); }
 
-bool SessionBase_0_10::isValid() const { return impl; }
+bool SessionBase_0_10::isValid() const { return !!impl; }
 
 Connection SessionBase_0_10::getConnection()
 {
--- qpidc-0.16/src/qpid/cluster/ClusterMap.cpp.orig	2012-03-22 19:51:28.000000000 +0100
+++ qpidc-0.16/src/qpid/cluster/ClusterMap.cpp	2020-12-13 07:07:40.639376325 +0100
@@ -28,10 +28,6 @@
 #include <iterator>
 #include <ostream>
 
-using namespace std;
-using boost::ref;
-using boost::optional;
-
 namespace qpid {
 using namespace framing;
 
@@ -42,7 +38,7 @@
 void addFieldTableValue(FieldTable::ValueMap::value_type vt, ClusterMap::Map& map, ClusterMap::Set& set) {
     MemberId id(vt.first);
     set.insert(id);
-    string url = vt.second->get<string>();
+    std::string url = vt.second->get<string>();
     if (!url.empty())
         map.insert(ClusterMap::Map::value_type(id, Url(url)));
 }
@@ -56,7 +52,7 @@
 ClusterMap::ClusterMap() : frameSeq(0) {}
 
 ClusterMap::ClusterMap(const Map& map) : frameSeq(0) {
-    transform(map.begin(), map.end(), inserter(alive, alive.begin()), bind(&Map::value_type::first, _1));
+    std::transform(map.begin(), map.end(), std::inserter(alive, alive.begin()), boost::bind(&Map::value_type::first, _1));
     members = map;
 }
 
@@ -64,19 +60,19 @@
                        framing::SequenceNumber frameSeq_)
     : frameSeq(frameSeq_)
 {
-    for_each(joinersFt.begin(), joinersFt.end(), bind(&addFieldTableValue, _1, ref(joiners), ref(alive)));
-    for_each(membersFt.begin(), membersFt.end(), bind(&addFieldTableValue, _1, ref(members), ref(alive)));
+    for_each(joinersFt.begin(), joinersFt.end(), boost::bind(&addFieldTableValue, _1, boost::ref(joiners), boost::ref(alive)));
+    for_each(membersFt.begin(), membersFt.end(), boost::bind(&addFieldTableValue, _1, boost::ref(members), boost::ref(alive)));
 }
 
 void ClusterMap::toMethodBody(framing::ClusterConnectionMembershipBody& b) const {
     b.getJoiners().clear();
-    for_each(joiners.begin(), joiners.end(), bind(&insertFieldTableFromMapValue, ref(b.getJoiners()), _1));
+    for_each(joiners.begin(), joiners.end(), boost::bind(&insertFieldTableFromMapValue, boost::ref(b.getJoiners()), _1));
     for(Set::const_iterator i = alive.begin(); i != alive.end(); ++i) {
         if (!isMember(*i) && !isJoiner(*i))
             b.getJoiners().setString(i->str(), string());
     }
     b.getMembers().clear();
-    for_each(members.begin(), members.end(), bind(&insertFieldTableFromMapValue, ref(b.getMembers()), _1));
+    for_each(members.begin(), members.end(), boost::bind(&insertFieldTableFromMapValue, boost::ref(b.getMembers()), _1));
     b.setFrameSeq(frameSeq);
 }
 
@@ -89,21 +85,21 @@
     return joiners.empty() ? MemberId() : joiners.begin()->first;
 }
 
-vector<string> ClusterMap::memberIds() const {
-    vector<string> ids;
+std::vector<string> ClusterMap::memberIds() const {
+    std::vector<string> ids;
     for (Map::const_iterator iter = members.begin();
          iter != members.end(); iter++) {
-        stringstream stream;
+        std::stringstream stream;
         stream << iter->first;
         ids.push_back(stream.str());
     }
     return ids;
 }
 
-vector<Url> ClusterMap::memberUrls() const {
-    vector<Url> urls(members.size());
-    transform(members.begin(), members.end(), urls.begin(),
-                   bind(&Map::value_type::second, _1));
+std::vector<Url> ClusterMap::memberUrls() const {
+    std::vector<Url> urls(members.size());
+    std::transform(members.begin(), members.end(), urls.begin(),
+                   boost::bind(&Map::value_type::second, _1));
     return urls;
 }
 
@@ -111,18 +107,18 @@
 
 ClusterMap::Set ClusterMap::getMembers() const {
     Set s;
-    transform(members.begin(), members.end(), inserter(s, s.begin()),
-                   bind(&Map::value_type::first, _1));
+    std::transform(members.begin(), members.end(), std::inserter(s, s.begin()),
+                   boost::bind(&Map::value_type::first, _1));
     return s;
 }
 
-ostream& operator<<(ostream& o, const ClusterMap::Map& m) {
-    ostream_iterator<MemberId> oi(o);
-    transform(m.begin(), m.end(), oi, bind(&ClusterMap::Map::value_type::first, _1));
+std::ostream& operator<<(std::ostream& o, const ClusterMap::Map& m) {
+    std::ostream_iterator<MemberId> oi(o);
+    std::transform(m.begin(), m.end(), oi, boost::bind(&ClusterMap::Map::value_type::first, _1));
     return o;
 }
 
-ostream& operator<<(ostream& o, const ClusterMap& m) {
+std::ostream& operator<<(std::ostream& o, const ClusterMap& m) {
     for (ClusterMap::Set::const_iterator i = m.alive.begin(); i != m.alive.end(); ++i) {
         o << *i;
         if (m.isMember(*i)) o << "(member)";
@@ -134,7 +130,7 @@
     return o;
 }
 
-bool ClusterMap::updateRequest(const MemberId& id, const string& url) {
+bool ClusterMap::updateRequest(const MemberId& id, const std::string& url) {
     try {
         if (isAlive(id)) {
             joiners[id] = Url(url);
@@ -153,9 +149,9 @@
 bool ClusterMap::configChange(const Set& update) {
     bool memberChange = false;
     Set removed;
-    set_difference(alive.begin(), alive.end(),
+    std::set_difference(alive.begin(), alive.end(),
                         update.begin(), update.end(),
-                        inserter(removed, removed.begin()));
+                        std::inserter(removed, removed.begin()));
     alive = update;
     for (Set::const_iterator i = removed.begin(); i != removed.end(); ++i) {
         memberChange = memberChange || members.erase(*i);
@@ -164,14 +160,14 @@
     return memberChange;
 }
 
-optional<Url> ClusterMap::updateOffer(const MemberId& from, const MemberId& to) {
+boost::optional<Url> ClusterMap::updateOffer(const MemberId& from, const MemberId& to) {
     Map::iterator i = joiners.find(to);
     if (isAlive(from) && i != joiners.end()) {
         Url url= i->second;
         joiners.erase(i);       // No longer a potential updatee.
         return url;
     }
-    return optional<Url>();
+    return boost::optional<Url>();
 }
 
 }} // namespace qpid::cluster
--- qpidc-0.16/src/tests/cluster_test.cpp.orig	2011-02-10 11:12:41.000000000 +0100
+++ qpidc-0.16/src/tests/cluster_test.cpp	2020-12-13 07:51:00.611957732 +0100
@@ -667,7 +667,7 @@
     c0.connection.close();
     // Verify all brokers get wiring update.
     for (size_t i = 0; i < cluster.size(); ++i) {
-        BOOST_MESSAGE("i == "<< i);
+        BOOST_TEST_MESSAGE("i == "<< i);
         Client c(cluster[i]);
         BOOST_CHECK_EQUAL("q", c.session.queueQuery("q").getQueue());
         BOOST_CHECK_EQUAL("direct", c.session.exchangeQuery("ex").getType());
@@ -826,7 +826,7 @@
             mgr.execute(*this);
         }
             catch (const std::exception& e) {
-                BOOST_MESSAGE("Exception in mgr.execute: " << e.what());
+                BOOST_TEST_MESSAGE("Exception in mgr.execute: " << e.what());
                 failed = true;
             }
         }
--- qpidc-0.16/src/tests/ClusterFixture.h.orig	2010-08-03 17:33:12.000000000 +0200
+++ qpidc-0.16/src/tests/ClusterFixture.h	2020-12-13 11:22:38.086502946 +0100
@@ -99,7 +99,7 @@
     string name;
     std::auto_ptr<BrokerFixture> localBroker;
     int localIndex;
-    std::vector<shared_ptr<ForkedBroker> > forkedBrokers;
+    std::vector<boost::shared_ptr<ForkedBroker> > forkedBrokers;
     Args userArgs;
     boost::function<void (Args&, size_t)> updateArgs;
 };
--- qpidc-0.16/src/tests/ClusterFixture.cpp.orig	2010-07-01 21:19:48.000000000 +0200
+++ qpidc-0.16/src/tests/ClusterFixture.cpp	2020-12-13 11:27:02.765069059 +0100
@@ -54,7 +54,6 @@
 using namespace qpid::client;
 using qpid::sys::TIME_SEC;
 using qpid::broker::Broker;
-using boost::shared_ptr;
 using qpid::cluster::Cluster;
 using boost::assign::list_of;
 
@@ -89,7 +88,7 @@
     if (size() != size_t(localIndex))  { // fork a broker process.
         std::ostringstream os; os << "fork" << size();
         std::string prefix = os.str();
-        forkedBrokers.push_back(shared_ptr<ForkedBroker>(new ForkedBroker(makeArgs(prefix, size()))));
+        forkedBrokers.push_back(boost::shared_ptr<ForkedBroker>(new ForkedBroker(makeArgs(prefix, size()))));
         push_back(forkedBrokers.back()->getPort());
     }
     else {                      // Run in this process
@@ -117,7 +116,7 @@
     qpid::log::Logger::instance().setPrefix(prefix);
     localBroker.reset(new BrokerFixture(parseOpts(argv.size(), &argv[0])));
     push_back(localBroker->getPort());
-    forkedBrokers.push_back(shared_ptr<ForkedBroker>());
+    forkedBrokers.push_back(boost::shared_ptr<ForkedBroker>());
 }
 
 bool ClusterFixture::hasLocal() const { return localIndex >= 0 && size_t(localIndex) < size(); }
